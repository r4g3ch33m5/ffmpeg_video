// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.20.3
// source: service/split_video.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *VideoTimestamp) Reset() {
	*x = VideoTimestamp{}
	mi := &file_service_split_video_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTimestamp) ProtoMessage() {}

func (x *VideoTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_service_split_video_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTimestamp.ProtoReflect.Descriptor instead.
func (*VideoTimestamp) Descriptor() ([]byte, []int) {
	return file_service_split_video_proto_rawDescGZIP(), []int{0}
}

func (x *VideoTimestamp) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *VideoTimestamp) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type SplitVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputFile    string            `protobuf:"bytes,1,opt,name=input_file,json=inputFile,proto3" json:"input_file,omitempty"`
	OutputDir    string            `protobuf:"bytes,2,opt,name=output_dir,json=outputDir,proto3" json:"output_dir,omitempty"`
	CutTimeStamp []*VideoTimestamp `protobuf:"bytes,3,rep,name=cut_time_stamp,json=cutTimeStamp,proto3" json:"cut_time_stamp,omitempty"`
	ChunkSize    int32             `protobuf:"varint,4,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
}

func (x *SplitVideoRequest) Reset() {
	*x = SplitVideoRequest{}
	mi := &file_service_split_video_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitVideoRequest) ProtoMessage() {}

func (x *SplitVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_split_video_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitVideoRequest.ProtoReflect.Descriptor instead.
func (*SplitVideoRequest) Descriptor() ([]byte, []int) {
	return file_service_split_video_proto_rawDescGZIP(), []int{1}
}

func (x *SplitVideoRequest) GetInputFile() string {
	if x != nil {
		return x.InputFile
	}
	return ""
}

func (x *SplitVideoRequest) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

func (x *SplitVideoRequest) GetCutTimeStamp() []*VideoTimestamp {
	if x != nil {
		return x.CutTimeStamp
	}
	return nil
}

func (x *SplitVideoRequest) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

var File_service_split_video_proto protoreflect.FileDescriptor

var file_service_split_video_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x38, 0x0a, 0x0e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x11, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x12, 0x35, 0x0a, 0x0e, 0x63, 0x75, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x63, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x34,
	0x67, 0x33, 0x63, 0x68, 0x33, 0x33, 0x6d, 0x35, 0x2f, 0x66, 0x66, 0x6d, 0x70, 0x65, 0x67, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_service_split_video_proto_rawDescOnce sync.Once
	file_service_split_video_proto_rawDescData = file_service_split_video_proto_rawDesc
)

func file_service_split_video_proto_rawDescGZIP() []byte {
	file_service_split_video_proto_rawDescOnce.Do(func() {
		file_service_split_video_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_split_video_proto_rawDescData)
	})
	return file_service_split_video_proto_rawDescData
}

var file_service_split_video_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_service_split_video_proto_goTypes = []any{
	(*VideoTimestamp)(nil),    // 0: VideoTimestamp
	(*SplitVideoRequest)(nil), // 1: SplitVideoRequest
}
var file_service_split_video_proto_depIdxs = []int32{
	0, // 0: SplitVideoRequest.cut_time_stamp:type_name -> VideoTimestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_service_split_video_proto_init() }
func file_service_split_video_proto_init() {
	if File_service_split_video_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_split_video_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_service_split_video_proto_goTypes,
		DependencyIndexes: file_service_split_video_proto_depIdxs,
		MessageInfos:      file_service_split_video_proto_msgTypes,
	}.Build()
	File_service_split_video_proto = out.File
	file_service_split_video_proto_rawDesc = nil
	file_service_split_video_proto_goTypes = nil
	file_service_split_video_proto_depIdxs = nil
}
